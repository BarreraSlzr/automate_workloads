#!/usr/bin/env bun

/**
 * Compute subprocess utility for ephemeral context.
 * Receives a YAML file, processes it (deduplication, hash, metadata enrichment),
 * and outputs a traceable JSON file in the same directory.
 * Usable as both CLI and function.
 *
 * Usage (CLI):
 *   bun run fossils/ephemeral/context/subprocess/compute.ts <input.yml>
 *
 * Usage (import):
 *   import { compute } from './compute';
 *   const result = await compute('path/to/input.yml');
 */

import { readFileSync, writeFileSync } from 'fs';
import { join, dirname, basename, extname } from 'path';
import yaml from 'js-yaml';
import crypto from 'crypto';
import { validateLLMInput } from '../../../../src/utils/llmInputValidator';

export async function compute(inputPath: string): Promise<string> {
  try {
    // Read YAML input
    const ymlContent = readFileSync(inputPath, 'utf8');
    const data = yaml.load(ymlContent);

    // Ensure data is an object before spreading
    const baseData = (typeof data === 'object' && data !== null) ? data : {};

    // Enrich with required/optional metadata from docs
    // See: docs/ephemeral/address/ephemeral_context_management.md
    const enriched = {
      ...baseData,
      // Required metadata (add if missing)
      source: (baseData as any).source || 'compute',
      created_by: (baseData as any).created_by || 'process',
      status: (baseData as any).status || 'draft',
      // Optional metadata (add if missing)
      ttl: (baseData as any).ttl || '7d',
      notes: (baseData as any).notes || 'Auto-generated by compute.ts',
      // Deduplication hash
      deduplication_hash: crypto.createHash('sha256').update(JSON.stringify(baseData)).digest('hex'),
      computed_at: new Date().toISOString(),
      ephemeral: true,
      doc_reference: 'docs/ephemeral/address/ephemeral_context_management.md'
    };

    // Input validation using existing utilities
    const validation = validateLLMInput({ content: ymlContent, context: 'compute' });
    
    // Create simple snapshot for ML processing
    const snapshot = {
      processType: 'compute',
      inputPath,
      outputPath: '', // Will be set below
      validation,
      timestamp: new Date().toISOString(),
      sessionId: crypto.randomUUID(),
    };

    // Add validation and snapshot to enriched data
    const mlReadyEnriched = {
      ...enriched,
      validation,
      unified_ml_snapshot: snapshot,
      ml_ready: validation.isValid,
      compliance_score: validation.isValid ? 100 : 50,
      fallback_triggered: !validation.isValid,
    };

    // Output filename: <basename>.trace.json
    const base = basename(inputPath, extname(inputPath));
    const outPath = join(dirname(inputPath), `${base}.trace.json`);
    
    // Update snapshot with actual output path
    snapshot.outputPath = outPath;
    
    writeFileSync(outPath, JSON.stringify(mlReadyEnriched, null, 2));
    
    // Create separate snapshot file for ML processing
    const snapshotPath = join(dirname(inputPath), `${base}.unified.snapshot.json`);
    writeFileSync(snapshotPath, JSON.stringify(snapshot, null, 2));
    
    return outPath;
  } catch (err) {
    console.error('Compute error:', err);
    throw err;
  }
}

// CLI Entrypoint
if (require.main === module) {
  const [,, inputPath] = process.argv;
  if (!inputPath) {
    console.error('Usage: bun run fossils/ephemeral/context/subprocess/compute.ts <input.yml>');
    process.exit(1);
  }
  compute(inputPath)
    .then(outPath => {
      console.log('Traceable JSON written to:', outPath);
    })
    .catch(() => process.exit(1));
} 