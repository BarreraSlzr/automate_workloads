# ============================================================================
# CANONICAL ROADMAP FOSSIL
# ============================================================================
# 
# This is the canonical roadmap fossil - the authoritative source of truth for
# all project planning, automation targets, and milestone tracking.
#
# CANONICAL FOSSIL PROPERTIES:
# ✅ Always Up-to-Date: Reflects the most recent project direction
# ✅ Version Controlled: Every commit shows the exact project plan
# ✅ Automation-Friendly: Used by all scripts, CI/CD, and LLM services
# ✅ Human-Readable: YAML format supports comments and collaboration
# ✅ Schema-Validated: Enforced structure ensures consistency
# ✅ Traceable: Links to GitHub issues, milestones, and labels
#
# WORKFLOW:
# 1. Manual updates: Edit this file directly for planning changes
# 2. Automated updates: Scripts can update task status, add issues, etc.
# 3. Validation: E2E tests ensure schema compliance and completeness
# 4. GitHub sync: Creates/updates issues and milestones from this roadmap
# 5. Commit: Always commit after meaningful changes
#
# USAGE:
# - All automation scripts reference this file as the source of truth
# - LLM services use this for context and decision-making
# - CI/CD validates this file on every commit
# - GitHub sync creates issues and milestones from tasks
#
# ============================================================================

type: e2e_automation_roadmap
# Each task can now reference GitHub issues, milestones, and labels for explicit linkage.
# Example: issues: [101], milestones: ["E2E Test Refactor"], labels: ["automation", "roadmap"]
source: e2e-pre-commit
createdBy: llm-human-collab
createdAt: 2024-07-01T12:00:00.000Z
tasks:
  - task: Immediate Actions: Project Setup, Onboarding, and Audit Readiness
    status: planned
    owner: emmanuelbarrera
    context: |
      Consolidate all urgent setup, onboarding, and audit-related actions into a single, trackable task. This parent task ensures the project is easy to set up, audit, and onboard new contributors, and that all automation and fossilization patterns are followed from the start.
      The setup shell script (scripts/setup.sh), the curated setup_status.yml fossil, and their related tests are tightly coupled:
        - The setup script must update fossils/setup_status.yml after each step to reflect the current setup state.
        - The setup_status.yml schema must be defined to support this automation.
        - Tests must validate both the script's behavior and the correctness of setup_status.yml.
      Implementation order: 1) Implement/update the script with fossil update logic, 2) define/setup_status.yml schema, 3) write tests/validation for both.
    subtasks:
      - task: Provide comprehensive setup script and onboarding documentation for local development
        status: in progress
        owner: emmanuelbarrera
        context: |
          Create a shell script (scripts/setup.sh) that automates installation of all required dependencies for local development and CI:
            - Install Bun (if missing)
            - Install GitHub CLI (if missing)
            - Install Ollama (if missing)
            - Install project dependencies (bun install)
            - Authenticate GitHub CLI (gh auth login)
            - Download Ollama model(s) (ollama pull llama2; optionally add more, e.g., mistral)
            - Copy .env.example to .env if needed
          The script must:
            - Detect platform (Mac/Linux/Windows) and print clear instructions if auto-install is not possible
            - Print clear status for each step (e.g., "✅ Bun installed", "❌ Ollama not found")
            - Exit with code 0 on success, 1 on any failure
            - Be idempotent (safe to run multiple times)
            - Update fossils/setup_status.yml after each step to reflect the current setup state
          Update onboarding documentation (README.md, API_REFERENCE.md) to reference this script and provide quick setup instructions for all platforms. Include a troubleshooting section for common install issues. This will streamline onboarding for new contributors and CI environments, and ensure all local LLM and fossilization features are ready to use.
        subtasks:
          - task: Implement scripts/setup.sh with all required installation and setup steps, including platform detection, model download, and updating setup_status.yml
            status: in progress
          - task: Update README.md and API_REFERENCE.md with quick setup and troubleshooting instructions for all platforms, referencing setup_status.yml
            status: in progress
          - task: Test script on clean Mac, Linux, and Windows environments; ensure setup_status.yml is correctly updated and validated
            status: planned
        milestone: Immediate Actions
      - task: Document and promote setup_status.yml as canonical, programmatic, and auditable project setup fossil
        status: in progress
        owner: emmanuelbarrera
        context: |
          Create and maintain fossils/setup_status.yml as the single source of truth for project setup and onboarding state. This file should:
            - Track the installation, configuration, and validation status of all required tools, dependencies, and onboarding steps (e.g., Bun, GitHub CLI, Ollama, model downloads, fossil storage, .env setup)
            - Be machine- and human-readable for easy auditing, automation, and CI validation
            - Enable programmatic checks, onboarding automation, and scalable audits/tests for project setup
          The setup script must update this file after each step, and tests must validate its correctness. Reference setup_status.yml in onboarding and documentation. Integrate automation/scripts to update and validate this file as part of the setup workflow. This approach keeps project_status.yml focused on code/test state and makes setup status easy to scale, audit, and automate.
        subtasks:
          - task: Create fossils/setup_status.yml with a clear, extensible schema for setup/onboarding state, supporting automation from the setup script
            status: in progress
          - task: Integrate automation/scripts to update and validate setup_status.yml as part of setup and CI
            status: planned
          - task: Update onboarding and documentation to reference setup_status.yml for setup tracking and validation
            status: planned
        milestone: Immediate Actions
    milestone: Immediate Actions
  - task: Update integration tests to use real repo
    status: done
    issues: [101, 102]
    milestones: ["E2E Test Refactor"]
    labels: ["automation", "roadmap"]
    owner: emmanuelbarrera
    context: Refactor E2E tests to use barreraslzr/automate_workloads and test branch.
    subtasks:
      - task: Replace all test-owner/test-repo references
        status: done
        issues: [101]
        context: All references updated in integration tests.
      - task: Add GitHub CLI auth check
        status: pending
        issues: [102]
        context: Automate gh auth status pre-check in test runner.
    deadline: 2024-07-10T00:00:00.000Z
    milestone: E2E Test Refactor
  - task: Document fossilization workflow
    status: done
    owner: llm+human
    context: Ensure all contributors understand YAML→JSON→Markdown fossil workflow.
    issues: [103]
    milestones: ["Documentation Update"]
    labels: ["documentation", "fossilization"]
    deadline: 2024-07-05T00:00:00.000Z
    milestone: Documentation Update
  - task: Automate roadmap to GitHub issue/project sync
    status: done
    owner: emmanuelbarrera
    context: Script to create/update GitHub issues and milestones from roadmap YAML.
    issues: [104, 105]
    milestones: ["Automation Sync"]
    labels: ["automation", "sync"]
    subtasks:
      - task: Generate Markdown from YAML for GitHub issue body
        status: done
      - task: Create/update issues for each roadmap task
        status: partial
      - task: Sync milestones with roadmap deadlines
        status: pending
    milestone: Automation Sync
  - task: Prototype Gist-based fossilization for account-level fossils
    status: planned
    owner: emmanuelbarrera
    context: Design and implement a script to fossilize data to GitHub Gist for account-wide context and vector of changes.
    subtasks:
      - task: Research Gist API and authentication
        status: planned
      - task: Implement Gist fossilization utility
        status: planned
      - task: E2E test for Gist-based fossilization
        status: planned
    milestone: Gist Integration
  - task: Tag all test-created issues/labels for cleanup
    status: done
    owner: emmanuelbarrera
    recommendation: Use unique tags/labels
    preference: Automate cleanup
  - task: Add reporting/cleanup scripts for test artifacts
    status: done
    owner: emmanuelbarrera
    recommendation: Run post-test in CI
    preference: Summarize repo changes
  - task: Set up script to automatically curate test outputs as fossils
    status: in progress
    owner: emmanuelbarrera
    context: >
      Create a script that scans for test-generated output files (especially .temp-fossil-content-*.json, .temp-issue-body-*.md, fossils/curated_roadmap_demo_*.json) and curates them as versioned fossils. Prioritize handling these specific patterns first, as they are the most common untracked outputs after running tests. Only files with a valuable fossil curation or automation use case (referenced in roadmap.yml, project_status.yml, or onboarding/docs) should be written by tests/scripts. All other temp/test output files should be removed or refactored to avoid unnecessary file creation. This will enable future context gathering, automation, and traceability of test artifacts. The script should be integrated into the test or CI workflow and optionally summarize curated outputs.
    subtasks:
      - task: Handle .temp-fossil-content-*.json, .temp-issue-body-*.md, fossils/curated_roadmap_demo_*.json as first-class curated fossils
        status: in progress
      - task: Identify all other test output file patterns and locations
        status: in progress
      - task: Audit all test output files and stop writing any that are not used for fossil curation, context gathering, or traceability
        status: planned
      - task: Implement script to collect and curate outputs as fossils
        status: planned
      - task: Integrate script into test/CI workflow
        status: planned
      - task: Document the workflow and update onboarding/CONTRIBUTING docs
        status: planned
    recommendation: Automate curation post-test; only write files that are curated fossils or referenced artifacts
    preference: Store curated outputs in fossils/ or a dedicated directory
  - task: Integrate E2E tests into CI pipeline
    status: done
    owner: emmanuelbarrera
    recommendation: Fail fast on setup/auth errors
    preference: Run on PRs to main/test
  - task: Save this roadmap as a fossil or issue for LLM/human reference
    status: done
    owner: emmanuelbarrera
    recommendation: Use e2e-roadmap tag/type
    preference: Store in /src/types or as .md/.json
  - task: Document all E2E insights, code preferences, and automation patterns
    status: done
    owner: emmanuelbarrera
    recommendation: Add to project docs and reference in fossil
    preference: Keep docs up to date with codebase changes
  - task: Enforce schema-driven Params and runtime validation in all utilities
    status: in progress
    owner: emmanuelbarrera
    context: Refactor all utility and CLI functions to use Zod schemas for Params objects, with runtime validation and type safety.
    subtasks:
      - task: Add PARAMS OBJECT PATTERN docs to cli.ts and CONTRIBUTING_GUIDE.md
        status: done
      - task: Add Zod schema and runtime validation to curateAndCheck
        status: done
      - task: Add Zod schema and runtime validation to createFossilIssue
        status: done
      - task: Add Zod schema and runtime validation to createFossilLabel
        status: done
      - task: Add Zod schema and runtime validation to createFossilMilestone
        status: done
      - task: Add Zod schema and runtime validation to toFossilEntry (fossilize.ts)
        status: in progress
      - task: Add Zod schema and runtime validation to syncTrackerWithGitHub (syncTracker.ts)
        status: planned
      - task: Audit and refactor other utilities for Params/schema pattern
        status: in progress
      - task: Refactor all CLI/scripts/examples to use new Params types
        status: in progress
      - task: Add/extend unit tests for runtime validation (invalid/valid params)
        status: in progress
      - task: Add/extend integration/E2E tests for CLI/scripts
        status: planned
      - task: Document the pattern in code comments and onboarding docs
        status: done
    deadline: 2024-07-15T00:00:00.000Z
    milestone: Type-Safe Automation Refactor
  - task: Audit and enforce schema-driven, object params pattern in all utilities
    status: done
    owner: emmanuelbarrera
    context: All major utilities in src/utils (curateAndCheck, toFossilEntry, createFossilIssue, createFossilLabel, createFossilMilestone, PlanValidator, githubCliCommands) use Zod schemas and object params.
    issues: []
    milestones: ["Type-Safe Automation Refactor"]
    labels: ["automation", "schema", "refactor"]
    subtasks:
      - task: Centralize all schemas in src/types/schemas.ts
        status: done
      - task: Refactor all CLI/scripts/examples to use new Params types
        status: in progress
      - task: Add/extend unit and E2E tests for runtime validation
        status: in progress
      - task: Document the pattern in code comments and onboarding docs
        status: done
    milestone: Type-Safe Automation Refactor
  - task: Canonical fossilization of roadmap.yml and project_status.yml
    status: done
    owner: emmanuelbarrera
    context: >
      ✅ COMPLETED: Move roadmap.yml and project_status.yml into fossils/ as the canonical, versioned artifacts.
      ✅ COMPLETED: Update all automation, CI, and documentation to reference these files.
      ✅ COMPLETED: Remove demo fossils and update the roadmap to reflect this transition.
      ✅ COMPLETED: Mark this transition as done in roadmap.yml
      ✅ COMPLETED: Validate the new fossils in CI/E2E
      ✅ COMPLETED: Update onboarding docs and recommendations as needed
    subtasks:
      - task: Validate current roadmap.yml and project_status.yml for schema and completeness
        status: done
      - task: Move roadmap.yml and project_status.yml to fossils/ (use mv, not cp)
        status: done
      - task: Update fossils/README.md and add doc comments to the YAMLs
        status: done
      - task: Update all scripts, tests, and CI to use fossils/roadmap.yml and fossils/project_status.yml
        status: done
      - task: Remove or archive demo/test fossils (curated_roadmap_demo_*.json)
        status: done
      - task: Mark this transition as done in roadmap.yml
        status: done
      - task: Validate the new fossils in CI/E2E
        status: done
      - task: Update onboarding docs and recommendations as needed
        status: done
    key_points:
      - project_status.yml is generated/updated by scripts/update-project-status.ts and is a canonical, curated fossil artifact.
      - roadmap.yml should be treated the same way: a living, curated, versioned fossil, updated by automation and committed as a source of truth.
      - Both files enable traceability, automation, and reproducibility for the project.
      - Automate updates, curate and commit, integrate into E2E/CI, and document the workflow in onboarding/CONTRIBUTING docs.
    milestone: Canonical Fossilization Complete
  - task: Scaffold E2E tests for fossilization and LLM insights workflow
    status: planned
    owner: emmanuelbarrera
    context: >
      Design and implement E2E tests that validate the correctness, completeness, and traceability of project_status.yml and roadmap.yml as curated fossil artifacts. Ensure tests check YAML schema, fossilization status, test coverage, and integration of LLM-generated insights. Explore advanced patterns such as:
        - Automated validation of LLM recommendations for actionable test plans and code quality suggestions
        - Regression checks to ensure no loss of fossilization or coverage over time
        - CI integration to fail builds on regression or missing fossilization
        - Optionally, auto-curate or annotate fossils with LLM insights in a separate markdown file
    subtasks:
      - task: Define YAML schema and validation rules for both fossils
        status: planned
      - task: Implement E2E test to check schema and required fields
        status: planned
      - task: Add test to assert minimum coverage and fossilization thresholds
        status: planned
      - task: Add regression test to compare current and previous fossils
        status: planned
      - task: Integrate LLM insights validation (presence, format, actionable content)
        status: planned
      - task: Document E2E workflow and update onboarding/CONTRIBUTING docs
        status: planned
    milestone: Fossilization E2E & LLM Integration
  - task: Handle OpenAI API rate limit errors (429) in all LLM utilities
    status: planned
    owner: emmanuelbarrera
    context: |
      Add robust error handling, retry logic (with exponential backoff), and user feedback for OpenAI API rate limit errors (429) in all utilities, scripts, and services that use callOpenAIChat. Ensure that users are informed of delays and that automated workflows do not fail silently or crash on rate limits. Reference:
        - src/services/llm.ts (callOpenAIChat)
        - src/services/semantic-tagger.ts (SemanticTaggerService)
        - src/cli/llm-plan.ts (LLMPlanningService)
        - scripts/update-project-status.ts
        - scripts/migrations/003-migrate-legacy-issues.ts
    subtasks:
      - task: Implement retry and backoff in callOpenAIChat
        status: planned
      - task: Add user-facing error messages and delay notifications in CLI/scripts
        status: planned
      - task: Update all consumers (SemanticTaggerService, LLMPlanningService, scripts) to handle rate limits gracefully
        status: planned
      - task: Add/extend tests for rate limit scenarios
        status: planned
    milestone: LLM API Robustness
  - task: Refactor test to only write curated fossil outputs
    status: planned
    owner: emmanuelbarrera
    context: >
      Refactor a specific test (e.g., one that writes .temp-fossil-content-*.json or .temp-issue-body-*.md) so that it only writes output files if they are curated fossils or referenced artifacts. This will serve as an example for enforcing the new fossil-first test output policy.
    subtasks:
      - task: Identify a test that writes .temp-fossil-content-*.json or .temp-issue-body-*.md
        status: planned
      - task: Update the test to only write output if it is a curated fossil or referenced artifact
        status: planned
      - task: Verify the test and output comply with the new policy
        status: planned
    recommendation: Use as a template for refactoring other tests
    preference: All test outputs must be curated fossils or referenced artifacts
  - task: Enhance local LLM support for automation ecosystem
    status: planned
    owner: emmanuelbarrera
    context: >
      Expand and optimize local LLM integration to support the full automation ecosystem, including intelligent model management, 
      cost optimization, and seamless integration with fossilization workflows. Intelligent routing (auto/local/cloud), CLI override, documentation, and tests are now implemented. The current implementation has robust routing and override support, with further enhancements planned for model selection, cost adaptation, and performance monitoring.
    issues: []
    milestones: ["Local LLM Integration"]
    labels: ["automation", "llm", "optimization", "local"]
    subtasks:
      - task: Implement happy-path local LLM integration and testing (Ollama-first, extensible)
        status: done
        context: >
          Completed: Local LLM integration is extensible, CLI supports backend selection, and onboarding/docs are updated. Integration tests for backend switching and fossilization are in place.
        subtasks:
          - task: Create LocalLLMService abstraction with pluggable backend support
            status: done
          - task: Integrate local LLM usage into CLI (llm-usage or new command)
            status: done
          - task: Add integration tests for happy-path (Ollama) and backend switching
            status: done
          - task: Reference roadmap.yml task in test descriptions/comments for traceability
            status: done
          - task: Document setup, usage, and test mapping in onboarding/docs
            status: done
      - task: Enhance intelligent routing and cost optimization
        status: done
        context: >
          Intelligent routing between local and cloud LLMs is now implemented, including CLI override flags (--prefer-local, --prefer-cloud, --auto), full documentation, and unit tests. The system now automatically selects the best provider based on task complexity, cost, and user preference, with override support. See commit: feat(llm): intelligent routing between local and cloud LLMs with CLI override, docs, and tests. Docs updated in API_REFERENCE.md, README.md, and COMPLETE_AUTOMATION_ECOSYSTEM.md.
        subtasks:
          - task: Refine complexity analysis for better local/cloud routing decisions
            status: done
          - task: Add task-specific model selection (e.g., code generation vs content analysis)
            status: planned
          - task: Implement adaptive cost thresholds based on usage patterns
            status: planned
          - task: Add performance monitoring and automatic provider switching
            status: planned
      - task: Integrate local LLM with fossilization workflows
        status: planned
        context: >
          Ensure local LLM can handle all fossilization tasks including semantic tagging, content generation, and analysis
          with appropriate fallback to cloud LLM when needed.
        subtasks:
          - task: Test and optimize local LLM for semantic tagging tasks
            status: planned
          - task: Implement local LLM support for content generation and summarization
            status: done
            context: >
              generateExcerpt and related summarization now prefer local LLM (Ollama) with fallback to cloud LLM. Unit tests verify correct routing and fallback. See commit: feat(local-llm): prefer local LLM (Ollama) for content summarization in fossilization workflows. All tests pass and coverage is up to date.
          - task: Add local LLM support for fossil curation and validation
            status: planned
            context: >
              Fossil curation and validation utilities (curateAndCheck, validation types) are being updated to prefer local LLM (Ollama) for any LLM-powered analysis, with fallback to cloud LLM. CLI and utility options allow explicit routing. Unit/integration tests will verify correct routing and fallback.
          - task: Create fallback strategies for complex fossilization tasks
            status: planned
      - task: Add CLI tools for local LLM management
        status: planned
        context: >
          Extend the existing llm-usage CLI with comprehensive local LLM management capabilities including model management,
          performance testing, and configuration.
        subtasks:
          - task: Add model management commands (list, install, remove, test)
            status: planned
          - task: Implement performance benchmarking and comparison tools
            status: planned
          - task: Add configuration management for local LLM settings
            status: planned
          - task: Create usage analytics specific to local LLM performance
            status: planned
      - task: Implement caching and optimization for local LLM
        status: planned
        context: >
          Add intelligent caching, response optimization, and performance tuning for local LLM calls to improve
          automation workflow efficiency.
        subtasks:
          - task: Implement response caching for repeated queries
            status: planned
          - task: Add prompt optimization and template management
            status: planned
          - task: Implement batch processing for multiple LLM calls
            status: planned
          - task: Add memory management and resource optimization
            status: planned
      - task: Add comprehensive testing and validation
        status: planned
        context: >
          Create comprehensive test suites for local LLM functionality including integration tests, performance tests,
          and fallback scenario testing.
        subtasks:
          - task: Add unit tests for local LLM provider implementations
            status: planned
          - task: Create integration tests for local LLM with fossilization workflows
            status: planned
          - task: Implement performance benchmarking tests
            status: planned
          - task: Add fallback and error handling tests
            status: planned
      - task: Document local LLM setup and usage patterns
        status: planned
        context: >
          Create comprehensive documentation for setting up and using local LLM in the automation ecosystem,
          including best practices and troubleshooting guides.
        subtasks:
          - task: Create setup guide for Ollama and other local LLM providers
            status: planned
          - task: Document best practices for local LLM configuration
            status: planned
          - task: Add troubleshooting guide for common local LLM issues
            status: planned
          - task: Create performance optimization guide
            status: planned
      - task: Fossilize LLM insights, benchmarks, and model discovery results
        status: done
        context: >
          Completed: LLM fossilization utilities and types are implemented, onboarding/docs updated, and integration tests cover all fossil types. All subtasks below are done.
        subtasks:
          - task: Design schema and storage location for LLM insights/benchmarks fossils
            status: done
          - task: Implement scripts/utilities to generate and curate these fossils
            status: done
          - task: Integrate fossilization of insights/benchmarks into LLM workflows and tests
            status: done
          - task: Reference fossilized insights/benchmarks in roadmap and documentation
            status: done
          - task: Add onboarding/docs section for fossil usage and auditing
            status: done
    key_points:
      - Current implementation has basic Ollama support but needs enhancement for production automation
      - Focus on intelligent routing, cost optimization, and seamless integration with existing workflows
      - Local LLM should handle most automation tasks with cloud LLM as fallback for complex operations
      - Performance monitoring and automatic optimization are critical for automation reliability
      - Comprehensive testing and documentation ensure maintainability and adoption
    recommendation: >
      Prioritize intelligent routing and fossilization integration first, then add CLI tools and optimization features.
      Focus on reliability and seamless fallback to cloud LLM when local LLM is insufficient.
    preference: >
      Prefer local LLM for cost-sensitive automation tasks, with cloud LLM for complex analysis and generation tasks.
      Implement comprehensive monitoring and automatic provider switching based on performance and cost metrics.
    deadline: 2024-08-15T00:00:00.000Z
    milestone: Local LLM Integration
  - task: Remove semantic tag test LLM patching/simulation once local Ollama model is connected
    status: planned
    owner: emmanuelbarrera
    context: >
      The current semantic tag tests patch callLLM to simulate LLM responses for stable results. Once a local Ollama model is reliably connected and used in CI/tests, remove these patches and use the real local LLM for semantic tagging tests. This will ensure tests reflect actual model behavior and integration.
    labels: ["testing", "llm", "local-llm", "cleanup"]
    milestone: Local LLM Integration
  - task: Immediate Action: Enforce Canonical Fossil Artifact Policy and Curation Workflow
    status: planned
    owner: emmanuelbarrera
    context: |
      Implement and enforce a clear, canonical policy for fossil artifact storage, curation, and test output management. This ensures all fossil artifacts are versioned, traceable, and automation-friendly, and that test outputs do not pollute the repo with non-canonical files. The policy will clarify the use of .context-fossil/entries for knowledge/context fossils, and fossils/ for canonical YAML/JSON artifacts. The curation script will be updated to reflect this policy, and documentation and CI will be enhanced to enforce it.
    subtasks:
      - task: Update curation script to remove fossil_content.json and ensure curated_roadmap_demo.json is a programmatic export of roadmap.yml
        status: planned
      - task: Document the canonical fossil artifact policy in onboarding and CONTRIBUTING docs
        status: planned
      - task: Refactor tests to only write output files if they are curated fossils or referenced artifacts
        status: planned
      - task: Integrate the curation script into CI to enforce artifact policy post-test
        status: planned
      - task: Clarify and document the canonical use of .context-fossil/entries for versioned fossil artifacts
        status: planned 