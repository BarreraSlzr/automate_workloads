# ============================================================================
# CANONICAL ROADMAP FOSSIL
# ============================================================================
# 
# This is the canonical roadmap fossil - the authoritative source of truth for
# all project planning, automation targets, and milestone tracking.
#
# CANONICAL FOSSIL PROPERTIES:
# ✅ Always Up-to-Date: Reflects the most recent project direction
# ✅ Version Controlled: Every commit shows the exact project plan
# ✅ Automation-Friendly: Used by all scripts, CI/CD, and LLM services
# ✅ Human-Readable: YAML format supports comments and collaboration
# ✅ Schema-Validated: Enforced structure ensures consistency
# ✅ Traceable: Links to GitHub issues, milestones, and labels
#
# WORKFLOW:
# 1. Manual updates: Edit this file directly for planning changes
# 2. Automated updates: Scripts can update task status, add issues, etc.
# 3. Validation: E2E tests ensure schema compliance and completeness
# 4. GitHub sync: Creates/updates issues and milestones from this roadmap
# 5. Commit: Always commit after meaningful changes
#
# USAGE:
# - All automation scripts reference this file as the source of truth
# - LLM services use this for context and decision-making
# - CI/CD validates this file on every commit
# - GitHub sync creates issues and milestones from tasks
#
# ============================================================================

type: e2e_automation_roadmap
# Each task can now reference GitHub issues, milestones, and labels for explicit linkage.
# Example: issues: [101], milestones: ["E2E Test Refactor"], labels: ["automation", "roadmap"]
source: e2e-pre-commit
createdBy: llm-human-collab
createdAt: 2024-07-01T12:00:00.000Z
tasks:
  - task: Project Setup, Onboarding, and Audit Readiness
    status: planned
    owner: emmanuelbarrera
    tags:
      - immediate-actions
    context: |
      Consolidate all urgent setup, onboarding, and audit-related actions into a single, trackable task. This parent task ensures the project is easy to set up, audit, and onboard new contributors, and that all automation and fossilization patterns are followed from the start.
      The setup shell script (scripts/setup.sh), the curated setup_status.yml fossil, and their related tests are tightly coupled:
        - The setup script must update fossils/setup_status.yml after each step to reflect the current setup state.
        - The setup_status.yml schema must be defined to support this automation.
        - Tests must validate both the script's behavior and the correctness of setup_status.yml.
      Implementation order: 1) Implement/update the script with fossil update logic, 2) define/setup_status.yml schema, 3) write tests/validation for both.
    subtasks:
      - task: Provide comprehensive setup script and onboarding documentation for local development
        status: in progress
        owner: emmanuelbarrera
        tags: []
        context: |
          Create a shell script (scripts/setup.sh) that automates installation of all required dependencies for local development and CI:
            - Install Bun (if missing)
            - Install GitHub CLI (if missing)
            - Install Ollama (if missing)
            - Install project dependencies (bun install)
            - Authenticate GitHub CLI (gh auth login)
            - Download Ollama model(s) (ollama pull llama2; optionally add more, e.g., mistral)
            - Copy .env.example to .env if needed
          The script must:
            - Detect platform (Mac/Linux/Windows) and print clear instructions if auto-install is not possible
            - Print clear status for each step (e.g., "✅ Bun installed", "❌ Ollama not found")
            - Exit with code 0 on success, 1 on any failure
            - Be idempotent (safe to run multiple times)
            - Update fossils/setup_status.yml after each step to reflect the current setup state
          Update onboarding documentation (README.md, API_REFERENCE.md) to reference this script and provide quick setup instructions for all platforms. Include a troubleshooting section for common install issues. This will streamline onboarding for new contributors and CI environments, and ensure all local LLM and fossilization features are ready to use.
        subtasks:
          - task: Implement scripts/setup.sh with all required installation and setup steps, including platform detection, model download, and updating setup_status.yml
            status: in progress
            tags: []
          - task: Update README.md and API_REFERENCE.md with quick setup and troubleshooting instructions for all platforms, referencing setup_status.yml
            status: in progress
            tags: []
          - task: Test script on clean Mac, Linux, and Windows environments; ensure setup_status.yml is correctly updated and validated
            status: planned
            tags: []
        milestone: Immediate Actions
      - task: Document and promote setup_status.yml as canonical, programmatic, and auditable project setup fossil
        status: in progress
        owner: emmanuelbarrera
        tags: []
        context: |
          Create and maintain fossils/setup_status.yml as the single source of truth for project setup and onboarding state. This file should:
            - Track the installation, configuration, and validation status of all required tools, dependencies, and onboarding steps (e.g., Bun, GitHub CLI, Ollama, model downloads, fossil storage, .env setup)
            - Be machine- and human-readable for easy auditing, automation, and CI validation
            - Enable programmatic checks, onboarding automation, and scalable audits/tests for project setup
          The setup script must update this file after each step, and tests must validate its correctness. Reference setup_status.yml in onboarding and documentation. Integrate automation/scripts to update and validate this file as part of the setup workflow. This approach keeps project_status.yml focused on code/test state and makes setup status easy to scale, audit, and automate.
        subtasks:
          - task: Create fossils/setup_status.yml with a clear, extensible schema for setup/onboarding state, supporting automation from the setup script
            status: in progress
            tags: []
          - task: Integrate automation/scripts to update and validate setup_status.yml as part of setup and CI
            status: planned
            tags: []
          - task: Update onboarding and documentation to reference setup_status.yml for setup tracking and validation
            status: planned
            tags: []
        milestone: Immediate Actions
    milestone: Immediate Actions
  - task: Update integration tests to use real repo
    status: done
    issues: [101, 102]
    milestones: ["E2E Test Refactor"]
    labels: ["automation", "roadmap"]
    owner: emmanuelbarrera
    context: Refactor E2E tests to use barreraslzr/automate_workloads and test branch.
    subtasks:
      - task: Replace all test-owner/test-repo references
        status: done
        issues: [101]
        context: All references updated in integration tests.
      - task: Add GitHub CLI auth check
        status: pending
        issues: [102]
        context: Automate gh auth status pre-check in test runner.
    deadline: 2024-07-10T00:00:00.000Z
    milestone: E2E Test Refactor
  - task: Document fossilization workflow
    status: done
    owner: llm+human
    context: Ensure all contributors understand YAML→JSON→Markdown fossil workflow.
    issues: [103]
    milestones: ["Documentation Update"]
    labels: ["documentation", "fossilization"]
    deadline: 2024-07-05T00:00:00.000Z
    milestone: Documentation Update
  - task: Automate roadmap to GitHub issue/project sync
    status: done
    owner: emmanuelbarrera
    context: Script to create/update GitHub issues and milestones from roadmap YAML.
    issues: [104, 105]
    milestones: ["Automation Sync"]
    labels: ["automation", "sync"]
    subtasks:
      - task: Generate Markdown from YAML for GitHub issue body
        status: done
      - task: Create/update issues for each roadmap task
        status: partial
      - task: Sync milestones with roadmap deadlines
        status: pending
    milestone: Automation Sync
  - task: Prototype Gist-based fossilization for account-level fossils
    status: planned
    owner: emmanuelbarrera
    context: Design and implement a script to fossilize data to GitHub Gist for account-wide context and vector of changes.
    subtasks:
      - task: Research Gist API and authentication
        status: planned
      - task: Implement Gist fossilization utility
        status: planned
      - task: E2E test for Gist-based fossilization
        status: planned
    milestone: Gist Integration
  - task: Tag all test-created issues/labels for cleanup
    status: done
    owner: emmanuelbarrera
    recommendation: Use unique tags/labels
    preference: Automate cleanup
  - task: Add reporting/cleanup scripts for test artifacts
    status: done
    owner: emmanuelbarrera
    recommendation: Run post-test in CI
    preference: Summarize repo changes
  - task: Set up script to automatically curate test outputs as fossils
    status: in progress
    owner: emmanuelbarrera
    context: >
      Create a script that scans for test-generated output files (especially .temp-fossil-content-*.json, .temp-issue-body-*.md, fossils/curated_roadmap_demo_*.json) and curates them as versioned fossils. Prioritize handling these specific patterns first, as they are the most common untracked outputs after running tests. Only files with a valuable fossil curation or automation use case (referenced in roadmap.yml, project_status.yml, or onboarding/docs) should be written by tests/scripts. All other temp/test output files should be removed or refactored to avoid unnecessary file creation. This will enable future context gathering, automation, and traceability of test artifacts. The script should be integrated into the test or CI workflow and optionally summarize curated outputs.
      **New requirements:**
      - The curation logic must refuse or clean up any output files with timestamped filenames, unless explicitly archived outside the main repo.
      - Only stable, canonical filenames are allowed for curated fossils.
      - Document this policy and update onboarding/CONTRIBUTING docs to reflect the new filename and curation rules.
    subtasks:
      - task: Handle .temp-fossil-content-*.json, .temp-issue-body-*.md, fossils/curated_roadmap_demo_*.json as first-class curated fossils
        status: in progress
      - task: Identify all other test output file patterns and locations
        status: in progress
      - task: Audit all test output files and stop writing any that are not used for fossil curation, context gathering, or traceability
        status: planned
      - task: Implement script to collect and curate outputs as fossils
        status: planned
      - task: Integrate script into test/CI workflow
        status: planned
      - task: Document the workflow and update onboarding/CONTRIBUTING docs
        status: planned
      - task: Refuse or clean up any output files with timestamped filenames; only allow stable, canonical filenames for curated fossils
        status: planned
    recommendation: Automate curation post-test; only write files that are curated fossils or referenced artifacts
    preference: Store curated outputs in fossils/ or a dedicated directory
  - task: Integrate E2E tests into CI pipeline
    status: done
    owner: emmanuelbarrera
    recommendation: Fail fast on setup/auth errors
    preference: Run on PRs to main/test
  - task: Save this roadmap as a fossil or issue for LLM/human reference
    status: done
    owner: emmanuelbarrera
    recommendation: Use e2e-roadmap tag/type
    preference: Store in /src/types or as .md/.json
  - task: Document all E2E insights, code preferences, and automation patterns
    status: done
    owner: emmanuelbarrera
    recommendation: Add to project docs and reference in fossil
    preference: Keep docs up to date with codebase changes
  - task: Enforce schema-driven Params and runtime validation in all utilities
    status: in progress
    owner: emmanuelbarrera
    context: Refactor all utility and CLI functions to use Zod schemas for Params objects, with runtime validation and type safety.
    subtasks:
      - task: Add PARAMS OBJECT PATTERN docs to cli.ts and CONTRIBUTING_GUIDE.md
        status: done
      - task: Add Zod schema and runtime validation to curateAndCheck
        status: done
      - task: Add Zod schema and runtime validation to createFossilIssue
        status: done
      - task: Add Zod schema and runtime validation to createFossilLabel
        status: done
      - task: Add Zod schema and runtime validation to createFossilMilestone
        status: done
      - task: Add Zod schema and runtime validation to toFossilEntry (fossilize.ts)
        status: in progress
      - task: Add Zod schema and runtime validation to syncTrackerWithGitHub (syncTracker.ts)
        status: planned
      - task: Audit and refactor other utilities for Params/schema pattern
        status: in progress
      - task: Refactor all CLI/scripts/examples to use new Params types
        status: in progress
      - task: Add/extend unit tests for runtime validation (invalid/valid params)
        status: in progress
      - task: Add/extend integration/E2E tests for CLI/scripts
        status: planned
      - task: Document the pattern in code comments and onboarding docs
        status: done
    deadline: 2024-07-15T00:00:00.000Z
    milestone: Type-Safe Automation Refactor
  - task: Audit and enforce schema-driven, object params pattern in all utilities
    status: done
    owner: emmanuelbarrera
    context: All major utilities in src/utils (curateAndCheck, toFossilEntry, createFossilIssue, createFossilLabel, createFossilMilestone, PlanValidator, githubCliCommands) use Zod schemas and object params.
    issues: []
    milestones: ["Type-Safe Automation Refactor"]
    labels: ["automation", "schema", "refactor"]
    subtasks:
      - task: Centralize all schemas in src/types/schemas.ts
        status: done
      - task: Refactor all CLI/scripts/examples to use new Params types
        status: in progress
      - task: Add/extend unit and E2E tests for runtime validation
        status: in progress
      - task: Document the pattern in code comments and onboarding docs
        status: done
    milestone: Type-Safe Automation Refactor
  - task: Canonical fossilization of roadmap.yml and project_status.yml
    status: done
    owner: emmanuelbarrera
    context: >
      ✅ COMPLETED: Move roadmap.yml and project_status.yml into fossils/ as the canonical, versioned artifacts.
      ✅ COMPLETED: Update all automation, CI, and documentation to reference these files.
      ✅ COMPLETED: Remove demo fossils and update the roadmap to reflect this transition.
      ✅ COMPLETED: Mark this transition as done in roadmap.yml
      ✅ COMPLETED: Validate the new fossils in CI/E2E
      ✅ COMPLETED: Update onboarding docs and recommendations as needed
    subtasks:
      - task: Validate current roadmap.yml and project_status.yml for schema and completeness
        status: done
      - task: Move roadmap.yml and project_status.yml to fossils/ (use mv, not cp)
        status: done
      - task: Update fossils/README.md and add doc comments to the YAMLs
        status: done
      - task: Update all scripts, tests, and CI to use fossils/roadmap.yml and fossils/project_status.yml
        status: done
      - task: Remove or archive demo/test fossils (curated_roadmap_demo_*.json)
        status: done
      - task: Mark this transition as done in roadmap.yml
        status: done
      - task: Validate the new fossils in CI/E2E
        status: done
      - task: Update onboarding docs and recommendations as needed
        status: done
    key_points:
      - project_status.yml is generated/updated by scripts/update-project-status.ts and is a canonical, curated fossil artifact.
      - roadmap.yml should be treated the same way: a living, curated, versioned fossil, updated by automation and committed as a source of truth.
      - Both files enable traceability, automation, and reproducibility for the project.
      - Automate updates, curate and commit, integrate into E2E/CI, and document the workflow in onboarding/CONTRIBUTING docs.
    milestone: Canonical Fossilization Complete
  - task: Scaffold E2E tests for fossilization and LLM insights workflow
    status: planned
    owner: emmanuelbarrera
    context: >
      Design and implement E2E tests that validate the correctness, completeness, and traceability of project_status.yml and roadmap.yml as curated fossil artifacts. Ensure tests check YAML schema, fossilization status, test coverage, and integration of LLM-generated insights. Explore advanced patterns such as:
        - Automated validation of LLM recommendations for actionable test plans and code quality suggestions
        - Regression checks to ensure no loss of fossilization or coverage over time
        - CI integration to fail builds on regression or missing fossilization
        - Optionally, auto-curate or annotate fossils with LLM insights in a separate markdown file
    subtasks:
      - task: Define YAML schema and validation rules for both fossils
        status: planned
      - task: Implement E2E test to check schema and required fields
        status: planned
      - task: Add test to assert minimum coverage and fossilization thresholds
        status: planned
      - task: Add regression test to compare current and previous fossils
        status: planned
      - task: Integrate LLM insights validation (presence, format, actionable content)
        status: planned
      - task: Document E2E workflow and update onboarding/CONTRIBUTING docs
        status: planned
    milestone: Fossilization E2E & LLM Integration
  - task: Handle OpenAI API rate limit errors (429) in all LLM utilities
    status: planned
    owner: emmanuelbarrera
    context: |
      Add robust error handling, retry logic (with exponential backoff), and user feedback for OpenAI API rate limit errors (429) in all utilities, scripts, and services that use callOpenAIChat. Ensure that users are informed of delays and that automated workflows do not fail silently or crash on rate limits. Reference:
        - src/services/llm.ts (callOpenAIChat)
        - src/services/semantic-tagger.ts (SemanticTaggerService)
        - src/cli/llm-plan.ts (LLMPlanningService)
        - scripts/update-project-status.ts
        - scripts/migrations/003-migrate-legacy-issues.ts
    subtasks:
      - task: Implement retry and backoff in callOpenAIChat
        status: planned
      - task: Add user-facing error messages and delay notifications in CLI/scripts
        status: planned
      - task: Update all consumers (SemanticTaggerService, LLMPlanningService, scripts) to handle rate limits gracefully
        status: planned
      - task: Add/extend tests for rate limit scenarios
        status: planned
    milestone: LLM API Robustness
  - task: Refactor test to only write curated fossil outputs
    status: planned
    owner: emmanuelbarrera
    context: >
      Refactor a specific test (e.g., one that writes .temp-fossil-content-*.json or .temp-issue-body-*.md) so that it only writes output files if they are curated fossils or referenced artifacts. This will serve as an example for enforcing the new fossil-first test output policy.
      **New requirements:**
      - Tests must never write timestamped or mock/demo files to the repo.
      - Only stable, canonical filenames are allowed for any output that is fossilized or versioned.
    subtasks:
      - task: Identify a test that writes .temp-fossil-content-*.json or .temp-issue-body-*.md
        status: planned
      - task: Update the test to only write output if it is a curated fossil or referenced artifact
        status: planned
      - task: Verify the test and output comply with the new policy
        status: planned
      - task: Ensure no timestamped or mock/demo files are written to the repo; only stable, canonical filenames are used
        status: planned
    recommendation: Use as a template for refactoring other tests
    preference: All test outputs must be curated fossils or referenced artifacts
  - task: Enhance local LLM support for automation ecosystem
    status: planned
    owner: emmanuelbarrera
    context: >
      Expand and optimize local LLM integration to support the full automation ecosystem, including intelligent model management, 
      cost optimization, and seamless integration with fossilization workflows. Intelligent routing (auto/local/cloud), CLI override, documentation, and tests are now implemented. The current implementation has robust routing and override support, with further enhancements planned for model selection, cost adaptation, and performance monitoring.
    issues: []
    milestones: ["Local LLM Integration"]
    labels: ["automation", "llm", "optimization", "local"]
    subtasks:
      - task: Implement happy-path local LLM integration and testing (Ollama-first, extensible)
        status: done
        context: >
          Completed: Local LLM integration is extensible, CLI supports backend selection, and onboarding/docs are updated. Integration tests for backend switching and fossilization are in place.
        subtasks:
          - task: Create LocalLLMService abstraction with pluggable backend support
            status: done
          - task: Integrate local LLM usage into CLI (llm-usage or new command)
            status: done
          - task: Add integration tests for happy-path (Ollama) and backend switching
            status: done
          - task: Reference roadmap.yml task in test descriptions/comments for traceability
            status: done
          - task: Document setup, usage, and test mapping in onboarding/docs
            status: done
      - task: Enhance intelligent routing and cost optimization
        status: done
        context: >
          Intelligent routing between local and cloud LLMs is now implemented, including CLI override flags (--prefer-local, --prefer-cloud, --auto), full documentation, and unit tests. The system now automatically selects the best provider based on task complexity, cost, and user preference, with override support. See commit: feat(llm): intelligent routing between local and cloud LLMs with CLI override, docs, and tests. Docs updated in API_REFERENCE.md, README.md, and COMPLETE_AUTOMATION_ECOSYSTEM.md.
        subtasks:
          - task: Refine complexity analysis for better local/cloud routing decisions
            status: done
          - task: Add task-specific model selection (e.g., code generation vs content analysis)
            status: planned
          - task: Implement adaptive cost thresholds based on usage patterns
            status: planned
          - task: Add performance monitoring and automatic provider switching
            status: planned
      - task: Integrate local LLM with fossilization workflows
        status: planned
        context: >
          Ensure local LLM can handle all fossilization tasks including semantic tagging, content generation, and analysis
          with appropriate fallback to cloud LLM when needed.
        subtasks:
          - task: Test and optimize local LLM for semantic tagging tasks
            status: planned
          - task: Implement local LLM support for content generation and summarization
            status: done
            context: >
              generateExcerpt and related summarization now prefer local LLM (Ollama) with fallback to cloud LLM. Unit tests verify correct routing and fallback. See commit: feat(local-llm): prefer local LLM (Ollama) for content summarization in fossilization workflows. All tests pass and coverage is up to date.
          - task: Add local LLM support for fossil curation and validation
            status: planned
            context: >
              Fossil curation and validation utilities (curateAndCheck, validation types) are being updated to prefer local LLM (Ollama) for any LLM-powered analysis, with fallback to cloud LLM. CLI and utility options allow explicit routing. Unit/integration tests will verify correct routing and fallback.
          - task: Create fallback strategies for complex fossilization tasks
            status: planned
      - task: Add CLI tools for local LLM management
        status: planned
        context: >
          Extend the existing llm-usage CLI with comprehensive local LLM management capabilities including model management,
          performance testing, and configuration.
        subtasks:
          - task: Add model management commands (list, install, remove, test)
            status: planned
          - task: Implement performance benchmarking and comparison tools
            status: planned
          - task: Add configuration management for local LLM settings
            status: planned
          - task: Create usage analytics specific to local LLM performance
            status: planned
      - task: Implement caching and optimization for local LLM
        status: planned
        context: >
          Add intelligent caching, response optimization, and performance tuning for local LLM calls to improve
          automation workflow efficiency.
        subtasks:
          - task: Implement response caching for repeated queries
            status: planned
          - task: Add prompt optimization and template management
            status: planned
          - task: Implement batch processing for multiple LLM calls
            status: planned
          - task: Add memory management and resource optimization
            status: planned
      - task: Add comprehensive testing and validation
        status: planned
        context: >
          Create comprehensive test suites for local LLM functionality including integration tests, performance tests,
          and fallback scenario testing.
        subtasks:
          - task: Add unit tests for local LLM provider implementations
            status: planned
          - task: Create integration tests for local LLM with fossilization workflows
            status: planned
          - task: Implement performance benchmarking tests
            status: planned
          - task: Add fallback and error handling tests
            status: planned
      - task: Document local LLM setup and usage patterns
        status: planned
        context: >
          Create comprehensive documentation for setting up and using local LLM in the automation ecosystem,
          including best practices and troubleshooting guides.
        subtasks:
          - task: Create setup guide for Ollama and other local LLM providers
            status: planned
          - task: Document best practices for local LLM configuration
            status: planned
          - task: Add troubleshooting guide for common local LLM issues
            status: planned
          - task: Create performance optimization guide
            status: planned
      - task: Fossilize LLM insights, benchmarks, and model discovery results
        status: done
        context: >
          Completed: LLM fossilization utilities and types are implemented, onboarding/docs updated, and integration tests cover all fossil types. All subtasks below are done.
        subtasks:
          - task: Design schema and storage location for LLM insights/benchmarks fossils
            status: done
          - task: Implement scripts/utilities to generate and curate these fossils
            status: done
          - task: Integrate fossilization of insights/benchmarks into LLM workflows and tests
            status: done
          - task: Reference fossilized insights/benchmarks in roadmap and documentation
            status: done
          - task: Add onboarding/docs section for fossil usage and auditing
            status: done
    key_points:
      - Current implementation has basic Ollama support but needs enhancement for production automation
      - Focus on intelligent routing, cost optimization, and seamless integration with existing workflows
      - Local LLM should handle most automation tasks with cloud LLM as fallback for complex operations
      - Performance monitoring and automatic optimization are critical for automation reliability
      - Comprehensive testing and documentation ensure maintainability and adoption
    recommendation: >
      Prioritize intelligent routing and fossilization integration first, then add CLI tools and optimization features.
      Focus on reliability and seamless fallback to cloud LLM when local LLM is insufficient.
    preference: >
      Prefer local LLM for cost-sensitive automation tasks, with cloud LLM for complex analysis and generation tasks.
      Implement comprehensive monitoring and automatic provider switching based on performance and cost metrics.
    deadline: 2024-08-15T00:00:00.000Z
    milestone: Local LLM Integration
  - task: Remove semantic tag test LLM patching/simulation once local Ollama model is connected
    status: planned
    owner: emmanuelbarrera
    context: >
      The current semantic tag tests patch callLLM to simulate LLM responses for stable results. Once a local Ollama model is reliably connected and used in CI/tests, remove these patches and use the real local LLM for semantic tagging tests. This will ensure tests reflect actual model behavior and integration.
    labels: ["testing", "llm", "local-llm", "cleanup"]
    milestone: Local LLM Integration
  - task: Enforce Canonical Fossil Artifact Policy and Curation Workflow
    tags:
      - immediate-actions
    status: planned
    owner: emmanuelbarrera
    context: |
      Implement and enforce a clear, canonical policy for fossil artifact storage, curation, and test output management. This ensures all fossil artifacts are versioned, traceable, and automation-friendly, and that test outputs do not pollute the repo with non-canonical files. The policy will clarify the use of .context-fossil/entries for knowledge/context fossils, and fossils/ for canonical YAML/JSON artifacts. The curation script will be updated to reflect this policy, and documentation and CI will be enhanced to enforce it.
      **New requirements:**
      - Timestamped filenames (e.g., file-2024-07-01T12:00:00.000Z.json) are strictly prohibited for all canonical fossils, exports, backups, and reports. Use stable, predictable names (e.g., project_status.yml, insight.json, progress-report.md).
      - Only real, curated artifacts are versioned and committed. Test/demo outputs must be cleaned up post-test and never committed.
      - Temporary/backup files (if needed) must be .gitignore'd or stored outside the main repo.
      - All fossil entries must have a type field and be schema-validated.
    subtasks:
      - task: Update curation script to remove fossil_content.json and ensure curated_roadmap_demo.json is a programmatic export of roadmap.yml
        status: planned
      - task: Document the canonical fossil artifact policy in onboarding and CONTRIBUTING docs
        status: planned
      - task: Refactor tests to only write output files if they are curated fossils or referenced artifacts
        status: planned
      - task: Integrate the curation script into CI to enforce artifact policy post-test
        status: planned
      - task: Clarify and document the canonical use of .context-fossil/entries for versioned fossil artifacts
        status: planned
      - task: Prohibit timestamped filenames for all canonical fossils, exports, and reports; require stable filenames and cleanup of any timestamped or test/demo outputs
        status: planned
  - task: Automate public markdown and JSON generation from project_status.yml
    status: planned
    owner: emmanuelbarrera
    context: |
      Implement a TypeScript script that reads fossils/project_status.yml (YAML, canonical source of truth)
      and generates:
        - fossils/public/blog/project_status.post.md (public/blog-ready markdown, with frontmatter metadata)
        - fossils/public/api/project_status_public.json (optional, for public API/automation/metadata use)
      The script should use a robust timestamp library (e.g., luxon or date-fns) for all date fields.
      All outputs must include frontmatter (for markdown) or metadata (for JSON) with audience, timestamp, and source.
    milestone: Immediate Actions
  - task: Automate fossil-to-markdown/json workflow with GitHub Actions/CI
    status: planned
    owner: emmanuelbarrera
    context: |
      Implement a GitHub Actions/CI workflow that automatically runs the fossil-to-markdown/json publication script on commit/PR/merge.
      The workflow should validate generated outputs, publish to docs/blog/API as needed, and optionally update GitHub issues with the latest markdown.
      Ensure outputs are always in sync with the canonical YAML fossils and are CI-stamped for traceability.
    milestone: Immediate Actions
  - task: Fossilize prompts/system messages and publish as needed
    status: planned
    owner: emmanuelbarrera
    context: |
      Design and implement a process to curate, version, and store prompts/system messages as fossils in fossils/prompts/.
      Automate publication of these prompts for LLM context, automation, and reproducibility, supporting future integrations and audits.
    milestone: Immediate Actions
  - task: Integrate local LLM for context gathering and fossilization
    status: planned
    owner: emmanuelbarrera
    context: |
      Implement a script that uses a local LLM to:
        - Summarize and extract insights from project_status.yml and roadmap.yml
        - Generate public-facing markdown/blog posts from fossil data
        - Suggest or automate updates to GitHub issues and project status
        - Keep all outputs in sync with the canonical fossil workflow
  - task: Close Documentation Gaps and Improve Coherence Across All Docs
    status: in progress
    owner: emmanuelbarrera
    tags:
      - immediate-actions
      - documentation
      - coherence
    context: |
      Address critical gaps identified in documentation analysis to ensure all docs are cohesive, coherent, and aligned with current implementation patterns. This task consolidates all documentation improvements needed to close gaps between documented patterns and actual implementation, ensuring consistency across all onboarding, API, and development guides.
      
      **Critical Gaps Identified:**
      1. **Fossil-Backed Creation**: Docs mention deprecated patterns but don't clearly promote fossil-backed utilities
      2. **Intelligent Tagging**: Missing documentation of semantic tagging system and LLM integration
      3. **Centralized CLI Commands**: Inconsistent documentation of GitHubCLICommands utility
      4. **Validation Patterns**: Incomplete documentation of Zod validation and Params object patterns
      5. **Local LLM Integration**: Missing comprehensive local LLM setup and usage documentation
      6. **Fossil Publication Workflow**: Incomplete documentation of YAML→JSON→Markdown workflow
      7. **Error Handling**: Inconsistent documentation of error handling patterns
      8. **Testing Patterns**: Missing documentation of fossil-first test output policy
      
      **Immediate Actions Completed:**
      ✅ **GitHubService.createIssue() Fixed** - Restored functionality while maintaining backward compatibility
      ✅ **Direct execSync Calls Eliminated** - All GitHub CLI calls now use centralized `GitHubCLICommands`
      ✅ **Async/Await Patterns Standardized** - Fixed all async/await inconsistencies across codebase
      ✅ **GitHubCLICommands Enhanced** - Added API call support and improved error handling
      ✅ **Documentation Updated** - Key docs updated to promote fossil-backed creation and consistent patterns
    subtasks:
      - task: Update API_REFERENCE.md to promote fossil-backed creation and deprecate direct CLI calls
        status: done
        context: |
          Update API_REFERENCE.md to clearly promote fossil-backed utilities (createFossilIssue, createFossilLabel, createFossilMilestone) as the primary pattern and clearly mark direct GitHub CLI calls as deprecated. Add comprehensive examples of fossil-backed creation, deduplication, and progress tracking.
        subtasks:
          - task: Add prominent fossil-backed creation section with examples
            status: done
          - task: Mark GitHubService.createIssue as deprecated with migration guide
            status: done
          - task: Add fossil deduplication and progress tracking documentation
            status: done
          - task: Update all CLI examples to use fossil-backed utilities
            status: done
      - task: Document intelligent tagging system and LLM integration patterns
        status: planned
        context: |
          Create comprehensive documentation for the semantic tagging system, including LLM integration, intelligent routing, and fossil-based tagging patterns. Update all relevant docs to reference the intelligent tagging system.
        subtasks:
          - task: Add intelligent tagging section to API_REFERENCE.md
            status: planned
          - task: Document semantic tagging CLI commands and patterns
            status: planned
          - task: Update COMPLETE_AUTOMATION_ECOSYSTEM.md with tagging integration
            status: planned
          - task: Add tagging examples to DEVELOPMENT_GUIDE.md
            status: planned
      - task: Centralize and document GitHubCLICommands utility patterns
        status: done
        context: |
          Ensure all documentation consistently references and documents the GitHubCLICommands utility as the centralized pattern for all GitHub CLI operations. Update CLI_COMMAND_INSIGHTS.md and other docs to reflect this pattern.
        subtasks:
          - task: Update CLI_COMMAND_INSIGHTS.md with GitHubCLICommands examples
            status: done
          - task: Add GitHubCLICommands section to API_REFERENCE.md
            status: done
          - task: Update DEVELOPMENT_GUIDE.md with centralized CLI patterns
            status: done
          - task: Ensure all CLI examples use GitHubCLICommands
            status: done
      - task: Document comprehensive validation patterns with Zod schemas
        status: done
        context: |
          Update all documentation to comprehensively cover Zod validation patterns, Params object patterns, and runtime validation. Ensure all docs reference the centralized schemas in src/types/schemas.ts.
        subtasks:
          - task: Add validation patterns section to API_REFERENCE.md
            status: done
          - task: Update DEVELOPMENT_GUIDE.md with Zod validation examples
            status: done
          - task: Document Params object pattern in all relevant docs
            status: done
          - task: Add validation error handling documentation
            status: done
      - task: Create comprehensive local LLM setup and usage documentation
        status: planned
        context: |
          Create comprehensive documentation for local LLM setup, usage, and integration patterns. Update all docs to include local LLM options and best practices.
        subtasks:
          - task: Add local LLM setup guide to API_REFERENCE.md
            status: planned
          - task: Create local LLM troubleshooting and best practices guide
            status: planned
          - task: Update COMPLETE_AUTOMATION_ECOSYSTEM.md with local LLM integration
            status: planned
          - task: Add local LLM examples to DEVELOPMENT_GUIDE.md
            status: planned
      - task: Complete fossil publication workflow documentation
        status: planned
        context: |
          Complete documentation of the YAML→JSON→Markdown fossil publication workflow, including folder structure, automation patterns, and future integrations.
        subtasks:
          - task: Update FOSSIL_PUBLICATION_WORKFLOW.md with complete examples
            status: planned
          - task: Add publication workflow to API_REFERENCE.md
            status: planned
          - task: Document folder structure and naming conventions
            status: planned
          - task: Add future integration patterns (React/MDX/Next.js)
            status: planned
      - task: Standardize error handling documentation across all docs
        status: done
        context: |
          Ensure all documentation consistently covers error handling patterns, including service response patterns, CLI error handling, and fossil error handling.
        subtasks:
          - task: Add comprehensive error handling section to API_REFERENCE.md
            status: done
          - task: Update DEVELOPMENT_GUIDE.md with error handling patterns
            status: done
          - task: Document error handling in CLI_COMMAND_INSIGHTS.md
            status: done
          - task: Add error handling examples to all relevant docs
            status: done
      - task: Document fossil-first test output policy and patterns
        status: done
        context: |
          Create comprehensive documentation of the fossil-first test output policy, including what files can be written, naming conventions, and cleanup requirements.
        subtasks:
          - task: Add fossil-first test policy to DEVELOPMENT_GUIDE.md
            status: done
          - task: Document test output patterns in TESTING_LEARNINGS.md
            status: done
          - task: Add test output examples and best practices
            status: done
          - task: Update CONTRIBUTING_GUIDE.md with test output requirements
            status: done
      - task: Create documentation coherence checklist and validation
        status: done
        context: |
          Create a documentation coherence checklist and validation process to ensure all docs remain aligned and consistent.
        subtasks:
          - task: Create documentation coherence checklist
            status: done
          - task: Add documentation validation to CI process
            status: planned
          - task: Create documentation update workflow
            status: planned
          - task: Add documentation review process
            status: planned
    key_points:
      - All documentation must promote fossil-backed creation as the primary pattern
      - Intelligent tagging and LLM integration must be comprehensively documented
      - Centralized CLI patterns must be consistently referenced
      - Validation patterns must be clearly documented with examples
      - Local LLM integration must be fully documented with setup guides
      - Fossil publication workflow must be complete and future-proof
      - Error handling must be standardized across all docs
      - Test output policy must be clearly documented and enforced
    recommendation: |
      Prioritize updating API_REFERENCE.md and DEVELOPMENT_GUIDE.md first as they are the primary onboarding documents.
      Then update specialized docs (CLI_COMMAND_INSIGHTS.md, COMPLETE_AUTOMATION_ECOSYSTEM.md) to ensure consistency.
      Finally, create validation processes to maintain coherence going forward.
    preference: |
      Prefer comprehensive examples and clear migration paths over theoretical documentation.
      Focus on practical patterns that developers can immediately apply.
      Ensure all docs reference the same patterns and examples for consistency.
    deadline: 2024-07-20T00:00:00.000Z
    milestone: Documentation Coherence
  - task: Complete Remaining Documentation Improvements and Validation
    status: planned
    owner: emmanuelbarrera
    tags:
      - immediate-actions
      - documentation
      - validation
    context: |
      Complete the remaining documentation improvements and implement validation processes to ensure ongoing coherence. This task focuses on the remaining subtasks from the documentation coherence effort and establishing processes to maintain consistency going forward.
      
      **Remaining Work:**
      1. **Intelligent Tagging Documentation**: Complete documentation of semantic tagging system
      2. **Local LLM Documentation**: Comprehensive setup and usage guides
      3. **Fossil Publication Workflow**: Complete YAML→JSON→Markdown documentation
      4. **CI Integration**: Add documentation validation to CI process
      5. **Validation Processes**: Establish ongoing documentation review and validation
  - task: Enhanced Fossil Management and Versioning System
    status: planned
    owner: emmanuelbarrera
    tags:
      - feature-expansion
      - fossil-management
      - versioning
    context: |
      Implement advanced fossil management capabilities including versioning, history tracking, search/filtering, and export/import functionality. This expands the current fossil system to support enterprise-level fossil management with full traceability and discoverability.
      
      **Key Features:**
      - Fossil versioning with change tracking and metadata
      - Advanced search and filtering capabilities
      - Export/import functionality for fossil migration and backup
      - History tracking with author attribution and timestamps
    subtasks:
      - task: Implement Fossil Versioning and History Tracking
        status: planned
        context: |
          Create the FossilVersion interface and related utilities to track fossil versions, timestamps, changes, authors, and metadata. This enables full audit trails and change history for all fossil artifacts.
        subtasks:
          - task: Design FossilVersion interface with version, timestamp, changes, author, and metadata fields
            status: planned
          - task: Implement version tracking utilities in fossilize.ts
            status: planned
          - task: Add version history to all fossil creation and update operations
            status: planned
          - task: Create version comparison and diff utilities
            status: planned
          - task: Add version rollback capabilities
            status: planned
      - task: Implement Fossil Search and Filtering System
        status: planned
        context: |
          Create the FossilSearchParams interface and search utilities to enable finding fossils based on query, tags, date range, type, status, and filters. This provides powerful discovery capabilities for large fossil collections.
        subtasks:
          - task: Design FossilSearchParams interface with query, tags, dateRange, type, status, and filters
            status: planned
          - task: Implement search utilities with full-text and metadata search
            status: planned
          - task: Add CLI commands for fossil search and filtering
            status: planned
          - task: Create search result formatting and export options
            status: planned
          - task: Add search result caching for performance
            status: planned
      - task: Implement Fossil Export/Import Capabilities
        status: planned
        context: |
          Create the FossilExportOptions interface and utilities for exporting fossils in various formats with configurable metadata and history inclusion. This enables fossil migration, backup, and integration with external systems.
        subtasks:
          - task: Design FossilExportOptions interface with format, metadata, history, and filters
            status: planned
          - task: Implement export utilities for JSON, YAML, and Markdown formats
            status: planned
          - task: Add import utilities with validation and conflict resolution
            status: planned
          - task: Create bulk export/import capabilities for fossil collections
            status: planned
          - task: Add export/import CLI commands with progress tracking
            status: planned
    key_points:
      - Versioning enables full audit trails and change history
      - Search/filtering provides powerful discovery capabilities
      - Export/import supports fossil migration and backup
      - All features must integrate with existing fossil workflows
    recommendation: |
      Implement versioning first as it's foundational for other features.
      Then add search/filtering for discovery capabilities.
      Finally implement export/import for integration and backup.
    preference: |
      Prefer incremental versioning with minimal storage overhead.
      Focus on search performance and relevance ranking.
      Ensure export/import maintains fossil integrity and relationships.
    deadline: 2024-09-15T00:00:00.000Z
    milestone: Enhanced Fossil Management
  - task: Advanced Automation and Workflow Scheduling
    status: planned
    owner: emmanuelbarrera
    tags:
      - feature-expansion
      - automation
      - scheduling
    context: |
      Implement advanced automation capabilities including scheduled workflows, conditional triggers, and comprehensive analytics. This expands the current automation system to support complex, time-based, and event-driven automation scenarios.
      
      **Key Features:**
      - Scheduled automation workflows with cron expressions
      - Conditional automation triggers based on events and conditions
      - Automation analytics and reporting with metrics and cost analysis
      - Workflow orchestration and dependency management
    subtasks:
      - task: Implement Scheduled Automation Workflows
        status: planned
        context: |
          Create the ScheduledWorkflow interface and scheduler to enable time-based automation with cron expressions, triggers, actions, and enabled status. This supports recurring automation tasks and scheduled fossil operations.
        subtasks:
          - task: Design ScheduledWorkflow interface with id, name, schedule, cronExpression, triggers, actions, and enabled
            status: planned
          - task: Implement workflow scheduler with cron parsing and execution
            status: planned
          - task: Add workflow persistence and state management
            status: planned
          - task: Create workflow validation and conflict detection
            status: planned
          - task: Add CLI commands for workflow management
            status: planned
      - task: Implement Conditional Automation Triggers
        status: planned
        context: |
          Create the AutomationTrigger interface to support event-driven automation based on conditions, metadata, and triggers. This enables reactive automation based on fossil changes, GitHub events, and other conditions.
        subtasks:
          - task: Design AutomationTrigger interface with type, conditions, metadata, and enabled
            status: planned
          - task: Implement trigger evaluation engine with condition parsing
            status: planned
          - task: Add GitHub webhook integration for event triggers
            status: planned
          - task: Create trigger chaining and dependency management
            status: planned
          - task: Add trigger testing and validation utilities
            status: planned
      - task: Implement Automation Analytics and Reporting
        status: planned
        context: |
          Create the AutomationMetrics interface and analytics system to track success rates, execution times, error rates, cost analysis, and other performance metrics. This provides insights into automation effectiveness and optimization opportunities.
        subtasks:
          - task: Design AutomationMetrics interface with successRate, avgExecutionTime, errorRate, lastExecution, totalExecutions, costAnalysis
            status: planned
          - task: Implement metrics collection and storage
            status: planned
          - task: Create analytics dashboard and reporting utilities
            status: planned
          - task: Add cost analysis and optimization recommendations
            status: planned
          - task: Create performance monitoring and alerting
            status: planned
    key_points:
      - Scheduled workflows enable time-based automation
      - Conditional triggers support event-driven automation
      - Analytics provide insights for optimization
      - All features must integrate with existing fossil workflows
    recommendation: |
      Implement scheduled workflows first as they're most commonly needed.
      Then add conditional triggers for event-driven scenarios.
      Finally implement analytics for optimization and monitoring.
    preference: |
      Prefer simple cron expressions for scheduling.
      Focus on reliable trigger evaluation and execution.
      Ensure analytics provide actionable insights.
    deadline: 2024-09-30T00:00:00.000Z
    milestone: Advanced Automation
  - task: Enhanced User Experience and Developer Tools
    status: planned
    owner: emmanuelbarrera
    tags:
      - feature-expansion
      - ux
      - developer-tools
    context: |
      Implement enhanced user experience features including interactive tutorials, guided setup wizards, and comprehensive developer tools. This focuses on improving onboarding, usability, and developer productivity.
      
      **Key Features:**
      - Interactive tutorials and guided setup wizards
      - Enhanced CLI with suggestions and auto-completion
      - VSCode extension for fossil management
      - Developer templates and debugging tools
    subtasks:
      - task: Implement Interactive Tutorials and Setup Wizards
        status: planned
        context: |
          Create guided setup wizards and interactive tutorials to improve onboarding experience. This includes step-by-step guidance, validation, and help text for new users.
        subtasks:
          - task: Design GuidedSetupWizard interface with steps, currentStep, progress, and validation
            status: planned
          - task: Design SetupStep interface with id, title, description, type, required, validation, helpText, and examples
            status: planned
          - task: Implement interactive CLI with mode, suggestions, autoComplete, and helpContext
            status: planned
          - task: Create tutorial content for common workflows
            status: planned
          - task: Add progress tracking and resume capabilities
            status: planned
      - task: Implement VSCode Extension
        status: planned
        context: |
          Create a VSCode extension to provide fossil management capabilities directly in the editor, including commands, snippets, diagnostics, and completion providers.
          
          **Remote Repository & Edge Case Support:**
          The extension must support not only local development, but also remote repository analysis and auditing scenarios. This includes:
            - Opening, analyzing, and curating fossils in remote repositories (e.g., via SSH, Codespaces, remote containers)
            - Handling read-only, large, or non-standard repo structures
            - Integration with remote development environments
            - Ensuring all features work for both local and remote/hybrid use cases
          
          Document intended use cases (local, remote, hybrid) to avoid local-only bias and maximize value for audit/consulting scenarios.
        subtasks:
          - task: Design VSCodeExtension interface with commands, snippets, diagnostics, hoverProviders, and completionProviders
            status: planned
          - task: Implement fossil creation and management commands
            status: planned
          - task: Add fossil syntax highlighting and validation
            status: planned
          - task: Create fossil templates and snippets
            status: planned
          - task: Add fossil search and navigation features
            status: planned
          - task: Add support for remote repository analysis and curation (Codespaces, SSH, remote containers)
            status: planned
          - task: Test extension in remote and hybrid environments
            status: planned
          - task: Document remote use cases and edge case handling
            status: planned
      - task: Reinforce YAML→JSON→Markdown→Frontend Pipeline
        status: planned
        context: |
          Ensure the canonical pipeline from YAML fossils to JSON, Markdown, and modern frontend frameworks (React/MDX/Next.js/Remix/Tanstack) is fully documented and implemented. Avoid scope creep by keeping the pipeline modular, but document all integration points and technical requirements.
        subtasks:
          - task: Implement YAML→JSON transformation utility
            status: planned
          - task: Implement JSON→Markdown generator with frontmatter
            status: planned
          - task: Document and prototype Markdown→MDX/React integration
            status: planned
          - task: Add examples for Next.js/Remix/Tanstack Table consumption of fossil data
            status: planned
          - task: Create a "future integration" section listing possible frontend approaches
            status: planned
          - task: Document all integration points and revisit/prioritize as project evolves
            status: planned
      - task: Cohesion & Integration
        status: planned
        context: |
          Maintain project cohesion and avoid scope creep as new features are added. Explicitly link new features (VSCode extension, advanced automation, etc.) back to the core fossilization and publication workflow. Document dependencies, integration points, and review the roadmap regularly for overlap, gaps, and opportunities to consolidate or clarify.
        subtasks:
          - task: Map dependencies and integration points between all major features
            status: planned
          - task: Add regular roadmap review for cohesion and scope
            status: planned
          - task: Document how each feature supports the core fossilization/publication workflow
            status: planned
          - task: Consolidate or clarify overlapping features as needed
            status: planned
    key_points:
      - Interactive tutorials improve onboarding experience
      - VSCode extension provides editor integration
      - Developer tools enhance productivity
      - All features must integrate with existing fossil workflows
    recommendation: |
      Implement interactive tutorials first to improve onboarding.
      Then create VSCode extension for editor integration.
      Finally add developer templates and debugging tools.
    preference: |
      Prefer simple, guided tutorials over complex documentation.
      Focus on editor integration and developer productivity.
      Ensure tools provide immediate value and feedback.
    deadline: 2024-10-15T00:00:00.000Z
    milestone: Enhanced UX and Developer Tools
 