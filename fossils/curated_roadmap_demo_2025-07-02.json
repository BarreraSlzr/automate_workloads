{
  "type": "curated_fossil",
  "source": "automation",
  "createdBy": "llm+human",
  "createdAt": "2025-07-02T23:37:24.660Z",
  "kind": "roadmap",
  "tag": "demo",
  "curatedAt": "2025-07-02T23:37:24.660Z",
  "inputFile": "fossils/roadmap.yml",
  "outputYml": "",
  "outputJson": "fossils/curated_roadmap_demo_2025-07-02.json",
  "content": {
    "type": "e2e_automation_roadmap",
    "source": "e2e-pre-commit",
    "createdBy": "llm-human-collab",
    "createdAt": "2024-07-01T12:00:00.000Z",
    "tasks": [
      {
        "task": "Update integration tests to use real repo",
        "status": "done",
        "issues": [
          101,
          102
        ],
        "milestones": [
          "E2E Test Refactor"
        ],
        "labels": [
          "automation",
          "roadmap"
        ],
        "owner": "emmanuelbarrera",
        "context": "Refactor E2E tests to use barreraslzr/automate_workloads and test branch.",
        "subtasks": [
          {
            "task": "Replace all test-owner/test-repo references",
            "status": "done",
            "issues": [
              101
            ],
            "context": "All references updated in integration tests."
          },
          {
            "task": "Add GitHub CLI auth check",
            "status": "pending",
            "issues": [
              102
            ],
            "context": "Automate gh auth status pre-check in test runner."
          }
        ],
        "deadline": "2024-07-10T00:00:00.000Z",
        "milestone": "E2E Test Refactor"
      },
      {
        "task": "Document fossilization workflow",
        "status": "done",
        "owner": "llm+human",
        "context": "Ensure all contributors understand YAML→JSON→Markdown fossil workflow.",
        "issues": [
          103
        ],
        "milestones": [
          "Documentation Update"
        ],
        "labels": [
          "documentation",
          "fossilization"
        ],
        "deadline": "2024-07-05T00:00:00.000Z",
        "milestone": "Documentation Update"
      },
      {
        "task": "Automate roadmap to GitHub issue/project sync",
        "status": "done",
        "owner": "emmanuelbarrera",
        "context": "Script to create/update GitHub issues and milestones from roadmap YAML.",
        "issues": [
          104,
          105
        ],
        "milestones": [
          "Automation Sync"
        ],
        "labels": [
          "automation",
          "sync"
        ],
        "subtasks": [
          {
            "task": "Generate Markdown from YAML for GitHub issue body",
            "status": "done"
          },
          {
            "task": "Create/update issues for each roadmap task",
            "status": "partial"
          },
          {
            "task": "Sync milestones with roadmap deadlines",
            "status": "pending"
          }
        ],
        "milestone": "Automation Sync"
      },
      {
        "task": "Prototype Gist-based fossilization for account-level fossils",
        "status": "planned",
        "owner": "emmanuelbarrera",
        "context": "Design and implement a script to fossilize data to GitHub Gist for account-wide context and vector of changes.",
        "subtasks": [
          {
            "task": "Research Gist API and authentication",
            "status": "planned"
          },
          {
            "task": "Implement Gist fossilization utility",
            "status": "planned"
          },
          {
            "task": "E2E test for Gist-based fossilization",
            "status": "planned"
          }
        ],
        "milestone": "Gist Integration"
      },
      {
        "task": "Tag all test-created issues/labels for cleanup",
        "status": "done",
        "owner": "emmanuelbarrera",
        "recommendation": "Use unique tags/labels",
        "preference": "Automate cleanup"
      },
      {
        "task": "Add reporting/cleanup scripts for test artifacts",
        "status": "done",
        "owner": "emmanuelbarrera",
        "recommendation": "Run post-test in CI",
        "preference": "Summarize repo changes"
      },
      {
        "task": "Set up script to automatically curate test outputs as fossils",
        "status": "planned",
        "owner": "emmanuelbarrera",
        "context": "Create a script that scans for test-generated output files (especially .temp-fossil-content-*.json, .temp-issue-body-*.md, fossils/curated_roadmap_demo_*.json) and curates them as versioned fossils. Prioritize handling these specific patterns first, as they are the most common untracked outputs after running tests. Only files with a valuable fossil curation or automation use case (referenced in roadmap.yml, project_status.yml, or onboarding/docs) should be written by tests/scripts. All other temp/test output files should be removed or refactored to avoid unnecessary file creation. This will enable future context gathering, automation, and traceability of test artifacts. The script should be integrated into the test or CI workflow and optionally summarize curated outputs.\n",
        "subtasks": [
          {
            "task": "Handle .temp-fossil-content-*.json, .temp-issue-body-*.md, fossils/curated_roadmap_demo_*.json as first-class curated fossils",
            "status": "planned"
          },
          {
            "task": "Identify all other test output file patterns and locations",
            "status": "planned"
          },
          {
            "task": "Audit all test output files and stop writing any that are not used for fossil curation, context gathering, or traceability",
            "status": "planned"
          },
          {
            "task": "Implement script to collect and curate outputs as fossils",
            "status": "planned"
          },
          {
            "task": "Integrate script into test/CI workflow",
            "status": "planned"
          },
          {
            "task": "Document the workflow and update onboarding/CONTRIBUTING docs",
            "status": "planned"
          }
        ],
        "recommendation": "Automate curation post-test; only write files that are curated fossils or referenced artifacts",
        "preference": "Store curated outputs in fossils/ or a dedicated directory"
      },
      {
        "task": "Integrate E2E tests into CI pipeline",
        "status": "done",
        "owner": "emmanuelbarrera",
        "recommendation": "Fail fast on setup/auth errors",
        "preference": "Run on PRs to main/test"
      },
      {
        "task": "Save this roadmap as a fossil or issue for LLM/human reference",
        "status": "done",
        "owner": "emmanuelbarrera",
        "recommendation": "Use e2e-roadmap tag/type",
        "preference": "Store in /src/types or as .md/.json"
      },
      {
        "task": "Document all E2E insights, code preferences, and automation patterns",
        "status": "done",
        "owner": "emmanuelbarrera",
        "recommendation": "Add to project docs and reference in fossil",
        "preference": "Keep docs up to date with codebase changes"
      },
      {
        "task": "Enforce schema-driven Params and runtime validation in all utilities",
        "status": "partial",
        "owner": "emmanuelbarrera",
        "context": "Refactor all utility and CLI functions to use Zod schemas for Params objects, with runtime validation and type safety.",
        "subtasks": [
          {
            "task": "Add PARAMS OBJECT PATTERN docs to cli.ts and CONTRIBUTING_GUIDE.md",
            "status": "done"
          },
          {
            "task": "Add Zod schema and runtime validation to curateAndCheck",
            "status": "done"
          },
          {
            "task": "Add Zod schema and runtime validation to createFossilIssue",
            "status": "done"
          },
          {
            "task": "Add Zod schema and runtime validation to createFossilLabel",
            "status": "done"
          },
          {
            "task": "Add Zod schema and runtime validation to createFossilMilestone",
            "status": "done"
          },
          {
            "task": "Add Zod schema and runtime validation to toFossilEntry (fossilize.ts)",
            "status": "in progress"
          },
          {
            "task": "Add Zod schema and runtime validation to syncTrackerWithGitHub (syncTracker.ts)",
            "status": "pending"
          },
          {
            "task": "Audit and refactor other utilities for Params/schema pattern",
            "status": "pending"
          },
          {
            "task": "Refactor all CLI/scripts/examples to use new Params types",
            "status": "pending"
          },
          {
            "task": "Add/extend unit tests for runtime validation (invalid/valid params)",
            "status": "pending"
          },
          {
            "task": "Add/extend integration/E2E tests for CLI/scripts",
            "status": "pending"
          },
          {
            "task": "Document the pattern in code comments and onboarding docs",
            "status": "done"
          }
        ],
        "deadline": "2024-07-15T00:00:00.000Z",
        "milestone": "Type-Safe Automation Refactor"
      },
      {
        "task": "Audit and enforce schema-driven, object params pattern in all utilities",
        "status": "done",
        "owner": "emmanuelbarrera",
        "context": "All major utilities in src/utils (curateAndCheck, toFossilEntry, createFossilIssue, createFossilLabel, createFossilMilestone, PlanValidator, githubCliCommands) use Zod schemas and object params.",
        "issues": [],
        "milestones": [
          "Type-Safe Automation Refactor"
        ],
        "labels": [
          "automation",
          "schema",
          "refactor"
        ],
        "subtasks": [
          {
            "task": "Centralize all schemas in src/types/schemas.ts",
            "status": "done"
          },
          {
            "task": "Refactor all CLI/scripts/examples to use new Params types",
            "status": "in progress"
          },
          {
            "task": "Add/extend unit and E2E tests for runtime validation",
            "status": "in progress"
          },
          {
            "task": "Document the pattern in code comments and onboarding docs",
            "status": "done"
          }
        ],
        "milestone": "Type-Safe Automation Refactor"
      },
      {
        "task": "Canonical fossilization of roadmap.yml and project_status.yml",
        "status": "planned",
        "owner": "emmanuelbarrera",
        "context": "Move roadmap.yml and project_status.yml into fossils/ as the canonical, versioned artifacts. Update all automation, CI, and documentation to reference these files. Remove demo fossils and update the roadmap to reflect this transition.\n",
        "subtasks": [
          {
            "task": "Validate current roadmap.yml and project_status.yml for schema and completeness",
            "status": "planned"
          },
          {
            "task": "Move roadmap.yml and project_status.yml to fossils/ (use mv, not cp)",
            "status": "planned"
          },
          {
            "task": "Update fossils/README.md and add doc comments to the YAMLs",
            "status": "planned"
          },
          {
            "task": "Update all scripts, tests, and CI to use fossils/roadmap.yml and fossils/project_status.yml",
            "status": "planned"
          },
          {
            "task": "Remove or archive demo/test fossils (curated_roadmap_demo_*.json)",
            "status": "planned"
          },
          {
            "task": "Mark this transition as done in roadmap.yml",
            "status": "planned"
          },
          {
            "task": "Validate the new fossils in CI/E2E",
            "status": "planned"
          },
          {
            "task": "Update onboarding docs and recommendations as needed",
            "status": "planned"
          }
        ],
        "key_points": [
          "project_status.yml is generated/updated by scripts/update-project-status.ts and is a canonical, curated fossil artifact.",
          {
            "roadmap.yml should be treated the same way": "a living, curated, versioned fossil, updated by automation and committed as a source of truth."
          },
          "Both files enable traceability, automation, and reproducibility for the project.",
          "Automate updates, curate and commit, integrate into E2E/CI, and document the workflow in onboarding/CONTRIBUTING docs."
        ]
      },
      {
        "task": "Scaffold E2E tests for fossilization and LLM insights workflow",
        "status": "planned",
        "owner": "emmanuelbarrera",
        "context": "Design and implement E2E tests that validate the correctness, completeness, and traceability of project_status.yml and roadmap.yml as curated fossil artifacts. Ensure tests check YAML schema, fossilization status, test coverage, and integration of LLM-generated insights. Explore advanced patterns such as:\n  - Automated validation of LLM recommendations for actionable test plans and code quality suggestions\n  - Regression checks to ensure no loss of fossilization or coverage over time\n  - CI integration to fail builds on regression or missing fossilization\n  - Optionally, auto-curate or annotate fossils with LLM insights in a separate markdown file\n",
        "subtasks": [
          {
            "task": "Define YAML schema and validation rules for both fossils",
            "status": "planned"
          },
          {
            "task": "Implement E2E test to check schema and required fields",
            "status": "planned"
          },
          {
            "task": "Add test to assert minimum coverage and fossilization thresholds",
            "status": "planned"
          },
          {
            "task": "Add regression test to compare current and previous fossils",
            "status": "planned"
          },
          {
            "task": "Integrate LLM insights validation (presence, format, actionable content)",
            "status": "planned"
          },
          {
            "task": "Document E2E workflow and update onboarding/CONTRIBUTING docs",
            "status": "planned"
          }
        ],
        "milestone": "Fossilization E2E & LLM Integration"
      },
      {
        "task": "Handle OpenAI API rate limit errors (429) in all LLM utilities",
        "status": "planned",
        "owner": "emmanuelbarrera",
        "context": "Add robust error handling, retry logic (with exponential backoff), and user feedback for OpenAI API rate limit errors (429) in all utilities, scripts, and services that use callOpenAIChat. Ensure that users are informed of delays and that automated workflows do not fail silently or crash on rate limits. Reference:\n  - src/services/llm.ts (callOpenAIChat)\n  - src/services/semantic-tagger.ts (SemanticTaggerService)\n  - src/cli/llm-plan.ts (LLMPlanningService)\n  - scripts/update-project-status.ts\n  - scripts/migrations/003-migrate-legacy-issues.ts\n",
        "subtasks": [
          {
            "task": "Implement retry and backoff in callOpenAIChat",
            "status": "planned"
          },
          {
            "task": "Add user-facing error messages and delay notifications in CLI/scripts",
            "status": "planned"
          },
          {
            "task": "Update all consumers (SemanticTaggerService, LLMPlanningService, scripts) to handle rate limits gracefully",
            "status": "planned"
          },
          {
            "task": "Add/extend tests for rate limit scenarios",
            "status": "planned"
          }
        ],
        "milestone": "LLM API Robustness"
      },
      {
        "task": "Refactor test to only write curated fossil outputs",
        "status": "planned",
        "owner": "emmanuelbarrera",
        "context": "Refactor a specific test (e.g., one that writes .temp-fossil-content-*.json or .temp-issue-body-*.md) so that it only writes output files if they are curated fossils or referenced artifacts. This will serve as an example for enforcing the new fossil-first test output policy.\n",
        "subtasks": [
          {
            "task": "Identify a test that writes .temp-fossil-content-*.json or .temp-issue-body-*.md",
            "status": "planned"
          },
          {
            "task": "Update the test to only write output if it is a curated fossil or referenced artifact",
            "status": "planned"
          },
          {
            "task": "Verify the test and output comply with the new policy",
            "status": "planned"
          }
        ],
        "recommendation": "Use as a template for refactoring other tests",
        "preference": "All test outputs must be curated fossils or referenced artifacts"
      }
    ]
  }
}